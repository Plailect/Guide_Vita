---
title: "格式化存储空间 (Linux)"
---

{% include toc title="内容目录" %}

### 必读事项

这是一个用于格式化存储设备来使用StorageMgr内核插件的附加章节。

此外，还有一个使用F3来检查存储设备是否存在错误的附加章节。 这个操作的耗时取决于你存储设备和电脑的速度，可能将耗费数个小时完成！

本节教程仅限Linux用户。 如果你的电脑没有安装Linux，请参见 [格式化存储空间(Windows)](storage-format-(windows)) 或 [格式化存储空间 (Mac)](storage-format-(mac)) 。

### 你需要准备点啥？

* 最新的提供给你的分发版 [exfat-utils](https://github.com/relan/exfat) （请检查你的软件包管理器）
* 最新的提供给你的分发版 [fuse-exfat](https://github.com/relan/exfat) （请检查你的软件包管理器）
* 最新版 [F3](https://github.com/AltraMayor/f3/releases/latest)
  + 如果你不想检查你的内存卡是否有误就不需要下载这个

### 操作步骤

#### 第一步 — 格式化存储设备

1. 将存储设备插入电脑
1. 使用 `umount` 卸载你的存储设备
1. 输入 `sudo dd if=/dev/zero of=/dev/sdX` 来擦除存储设备
  +`sdX`应该是与你的存储设备对应的
1. 将存储设备从电脑上移除
1. 重新将存储设备插入电脑
1. 运行 `mkfs.exfat /dev/sdX` 以把存储设备格式为exFAT
  + 如果你的存储设备容量为256GB或更大，你必须将格式化时设置的分配单元大小设置为 64 KB

#### 第二步 — 验证存储设备

如果你不想检查你的存储设备是否有错误，那么请跳过这一节。
{: .notice--info}

1. 将 f3 `.zip` 文件解压
1. `cd` 到 f3 目录
1. 执行 `make` 命令以编译 F3
1. 将存储设备插入电脑
1. 挂载你的存储设备
1. 执行 `./f3write <你存储设备的挂载路径>`
1. 等待，直到该过程执行完毕。 你可以参考以下范例。

~~~ bash
$ ./f3write /media/michel/6135-3363/
Free space: 29.71 GB
Creating file 1.h2w ... OK!
...
Creating file 30.h2w ... OK!
Free space: 0.00 Byte
Average Writing speed: 4.90 MB/s
~~~

1. 执行 `./f3read <你存储设备的挂载路径>`
1. 等待，直到该过程执行完毕。 你可以参考以下范例。

~~~ bash
$ ./f3read /media/michel/6135-3363/
									SECTORS      ok/corrupted/changed/overwritten
Validating file 1.h2w ... 2097152/        0/      0/      0
...
Validating file 30.h2w ... 1491904/        0/      0/      0

	Data OK: 29.71 GB (62309312 sectors)
Data LOST: 0.00 Byte (0 sectors)
					Corrupted: 0.00 Byte (0 sectors)
	Slightly changed: 0.00 Byte (0 sectors)
				Overwritten: 0.00 Byte (0 sectors)
Average Reading speed: 9.42 MB/s
~~~

如果测试结果显示 `Data LOST: 0.00 Byte (0 sectors)` 代表你的存储设备完好，接着请删除存储设备上的所有 `.h2w` 文件。
{: .notice--success}

如果测试显示任何其他结果，你的存储设备可能已经出错或损坏，你可能需要更换一个存储设备！
{: .notice--danger}

___

### 返回到[开始教程](get-started)
{: .notice--primary}
